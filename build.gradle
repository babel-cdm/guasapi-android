buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0-beta1'
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

apply plugin: 'org.sonarqube'

// Variables para obtener info de git
def cmd_branch = "git rev-parse --abbrev-ref HEAD"
def cmd_commit = "git rev-parse HEAD"
def proc_commit = cmd_commit.execute()
def proc_branch = cmd_branch.execute()
ext.revision = proc_commit.text.trim()
ext.branch = proc_branch.text.trim()

sonarqube {

    properties {
        property "sonar.host.url", "http://172.16.112.94:9000/"

        property "sonar.analysis.mode", "publish" // preview
        property "sonar.issuesReport.console.enable", "true"
        property "sonar.gitlab.commit_sha", revision
        property "sonar.gitlab.ref", branch

        property "sonar.projectName", "Guasapi (Andorid - Library)"
        property "sonar.projectKey", "es.babel.guasapi"
        property "sonar.projectVersion", "1.0"
        property "sonar.java.coveragePlugin", "jacoco"

        property "sonar.sources", "src/main/"
        property "android.sonar.tests", "src/test/java"
        property "sonar.junit.reportsPath", "build/reports/jacoco/jacocoTestReport"
        property "sonar.jacoco.reportPath", "build/jacoco/testReleaseUnitTest.exec"
        property "sonar.binaries", "build/intermediates/classes/release"
        property "sonar.profile", "Android"
        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.import_unknown_files", "true"
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.7.4.201502262128'
}

def coverageSourceDirs = [
        'src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/release',
            excludes: ['**/R.class',
                       '**/dagger/**',
                       '**/raizlabs/**',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$Inject*.*',
                       '**/*$ModuleAdapter*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testProductionUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
